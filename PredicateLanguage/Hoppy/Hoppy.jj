options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Hoppy)

import java.io.PrintStream;
import java.util.*;

public class Hoppy
{
	public static void main(String args[]) throws ParseException, EvaluationException
	{
		Hoppy parser = new Hoppy(System.in);
		Program program = parser.Input();

		System.out.println(program.toString());
	}
}

interface IValue
{
	String toString();
}

final class BooleanValue implements IValue
{
	private boolean value;
	
	public BooleanValue(String value) throws ParseException
	{
		this.value = Boolean.parseBoolean(value);
	}
	
	public BooleanValue(boolean value)
	{
		this.value = value;
	}

	public boolean getValue() { return value; }
	public void setValue(boolean value) { this.value = value; }

	@Override
	public String toString()
	{
		return "B:" + value;
	}

	public static BooleanValue assertType(IValue val) throws EvaluationException
	{
		if(!(val instanceof BooleanValue))
		{
			throw new EvaluationException("Value type not boolean.");
		}
		else
		{
			return (BooleanValue)val;
		}
	}
}

final class IntegerValue implements IValue
{
	private int value;
	
	public IntegerValue(String value) throws ParseException
	{
		this.value = Integer.parseInt(value);
	}
	
	public IntegerValue(int value)
	{
		this.value = value;
	}

	public int getValue() { return value; }
	public void setValue(int value) { this.value = value; }

	@Override
	public String toString()
	{
		return "I:" + value;
	}

	public static IntegerValue assertType(IValue val) throws EvaluationException
	{
		if(!(val instanceof IntegerValue))
		{
			throw new EvaluationException("Value type not integer.");
		}
		else
		{
			return (IntegerValue)val;
		}
	}
}

final class FloatValue implements IValue
{
	private float value;
	
	public FloatValue(String value) throws ParseException
	{
		this.value = Float.parseFloat(value);
	}
	
	public FloatValue(float value)
	{
		this.value = value;
	}

	public float getValue() { return value; }
	public void setValue(float value) { this.value = value; }

	@Override
	public String toString()
	{
		return "F:" + value;
	}

	public static FloatValue assertType(IValue val) throws EvaluationException
	{
		if(!(val instanceof FloatValue))
		{
			throw new EvaluationException("Value type not float.");
		}
		else
		{
			return (FloatValue)val;
		}
	}
}


/**
 * Base class for syntax tree nodes.
 */
interface ISyntaxTree
{
	String toString();
}


/**
 * Concrete node class representing a named value.
 */
class NamedValueNode implements ISyntaxTree
{
	private final String name;

	public NamedValueNode(String name)
	{
		this.name = name;
	}

	@Override
	public String toString()
	{
		return "N:" + name;
	}
}

/**
 * Concrete node class representing a literal value.
 */
class LiteralValueNode implements ISyntaxTree
{
	private IValue val;

	public LiteralValueNode(IValue val)
	{
		this.val = val;
	}

	public IValue getVal() { return val; }
	public void setVal(IValue val) { this.val = val; }

	@Override
	public String toString()
	{
		return val.toString();
	}
}

/**
 * Concrete node class representing a unary operator.
 */
class UnaryOperatorNode implements ISyntaxTree
{
	public enum Operator
	{
		NOT
	}

	private Operator op;
	private ISyntaxTree child;
	
	public UnaryOperatorNode(String name, ISyntaxTree child) throws ParseException
	{
		this(parseOperator(name), child);
	}

	public UnaryOperatorNode(Operator op, ISyntaxTree child)
	{
		this.op = op;
		this.child = child;
	}

	public Operator getOp() { return op; }
	public void setOp(Operator op) { this.op = op; }

	public ISyntaxTree getChild() { return child; }
	public void setChild(ISyntaxTree child) { this.child = child; }

	@Override
	public String toString()
	{
		return "(" + child.toString() + " " + op.toString() + ")";
	}

	public static Operator parseOperator(String op) throws ParseException
	{
		if(op == "!")	return Operator.NOT;
		else			throw new ParseException("Expected `!'");
	}
}

/**
 * Concrete node class representing an binary operator.
 */
class BinaryOperatorNode implements ISyntaxTree
{
	public enum Operator
	{
		EQUAL,
		NOT_EQUAL,
		LESS_THAN,
		LESS_THAN_EQUAL,
		GREATER_THAN,
		GREATER_THAN_EQUAL,
		
		AND,
		OR,
		XOR,
		IMPLIES,
		EQUIVALENT,

		PLUS,
		MINUS,
		MULTIPLY,
		DIVIDE,
		POWER
	}

	private Operator op;
	private ISyntaxTree left;
	private ISyntaxTree right;
	
	public BinaryOperatorNode(String name, ISyntaxTree left, ISyntaxTree right) throws ParseException
	{
		this(parseOperator(name), left, right);
	}

	public BinaryOperatorNode(Operator op, ISyntaxTree left, ISyntaxTree right)
	{
		this.op = op;
		this.left = left;
		this.right = right;
	}

	public Operator getOp() { return op; }
	public void setOp(Operator op) { this.op = op; }
	
	public ISyntaxTree getLeft() { return left; }
	public void setLeft(ISyntaxTree left) { this.left = left; }

	public ISyntaxTree getRight() { return right; }
	public void setRight(ISyntaxTree right) { this.right = right; }

	@Override
	public String toString()
	{
		return "(" + left.toString() + " " + right.toString() + " " + op.toString() + ")";
	}

	public static Operator parseOperator(String op) throws ParseException
	{
		if(op.equals("=="))			return Operator.EQUAL;
		else if(op.equals("!="))	return Operator.NOT_EQUAL;
		else if(op.equals("<"))		return Operator.LESS_THAN;
		else if(op.equals("<="))	return Operator.LESS_THAN_EQUAL;
		else if(op.equals(">"))		return Operator.GREATER_THAN;
		else if(op.equals(">="))	return Operator.GREATER_THAN_EQUAL;

		else if(op.equals("+"))		return Operator.PLUS;
		else if(op.equals("-"))		return Operator.MINUS;
		else if(op.equals("*"))		return Operator.MULTIPLY;
		else if(op.equals("/"))		return Operator.DIVIDE;
		else if(op.equals("**"))	return Operator.POWER;

		else if(op.equals("&"))		return Operator.AND;
		else if(op.equals("|"))		return Operator.OR;
		else if(op.equals("^"))		return Operator.XOR;
		else if(op.equals("=>"))	return Operator.IMPLIES;
		else if(op.equals("<=>"))	return Operator.EQUIVALENT;

		else						throw new ParseException("Unknown operator: " + op);
	}
}

class QuantifierNode implements ISyntaxTree
{
	public enum Quantifier
	{
		FOR_ALL,
		EXISTS
	}

	private Quantifier quantifier;
	private String var;
	private String set;
	private ISyntaxTree predicate;

	
	public QuantifierNode(String name, String var, String set, ISyntaxTree predicate) throws ParseException
	{
		this(parseQuantifier(name), var, set, predicate);
	}
	
	public QuantifierNode(Quantifier quantifier, String var, String set, ISyntaxTree predicate)
	{
		this.quantifier = quantifier;
		this.var = var;
		this.set = set;
		this.predicate = predicate;
	}

	public Quantifier getQuantifier() { return quantifier; }
	public void setQuantifier(Quantifier quantifier) { this.quantifier = quantifier; }
	
	public String getVar() { return var; }
	public void setVar(String var) { this.var = var; }
	
	public String getSet() { return set; }
	public void setSet(String set) { this.set = set; }

	public ISyntaxTree getPredicate() { return predicate; }
	public void setPredicate(ISyntaxTree predicate) { this.predicate = predicate; }

	@Override
	public String toString()
	{
		return "[" + quantifier.toString() + " " + var + " in " + set + "](" + predicate.toString() + ")";
	}

	public static Quantifier parseQuantifier(String quantifier) throws ParseException
	{
		if(quantifier.equals("@"))		return Quantifier.FOR_ALL;
		else if(quantifier.equals("#"))	return Quantifier.EXISTS;
		else							throw new ParseException("Unknown quantifier: " + quantifier);
	}
}

final class FuncDecl implements ISyntaxTree
{
	private String name = null;
	private ISyntaxTree[] args = null;

	public String getName() { return name; }
	public void setName(String name) { this.name = name; }

	public ISyntaxTree[] getArgs() { return args; }
	public void setArgs(ISyntaxTree[] args) { this.args = args; }

	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder();

		if (args.length > 0)
		{
			sb.append(args[0]);

			for (int i = 1; i < args.length; ++i)
			{
				sb.append(" ");
				sb.append(args[i]);
			}
		}

		sb.append(" F:" + name + ")");

		return sb.toString();
	}
}

final class UsingDecl implements ISyntaxTree
{
	private int neighbourCount = 0;
	private String variable = null;
	private ISyntaxTree scope = null;

	public String getVariable() { return variable; }
	public void setVariable(String variable) { this.variable = variable; }

	public int getNeighbourCount() { return neighbourCount; }
	public void setNeighbourCount(int neighbourCount) { this.neighbourCount = neighbourCount; }
	
	public ISyntaxTree getScope() { return scope; }
	public void setScope(ISyntaxTree scope) { this.scope = scope; }

	@Override
	public String toString()
	{
		return "(USING " + neighbourCount + " AS " + variable + " IN " + scope.toString() + ")";
	}
}

final class PredicateTarget
{
	private boolean all = false;
	private int[] addr = null;

	public void setToAll() { all = true; addr = null; }
	public boolean isToAll() { return all; }

	public void setAddr(int[] addr) { this.addr = addr; all = false; }
	public int[] getAddr() { return addr; }

	@Override
	public String toString()
	{
		return all ? "all" : addr[0] + "." + addr[1];
	}
}

final class Program
{
	private final PredicateTarget target;
	private final ISyntaxTree tree;
	
	public Program(PredicateTarget target, ISyntaxTree tree)
	{
		this.target = target;
		this.tree = tree;
	}
	
	public PredicateTarget getPredicateTarget() { return target; }
	public ISyntaxTree getSyntaxTree() { return tree; }
	
	@Override
	public String toString()
	{
		return "[" + target.toString() + "] " + tree.toString();
	}
}

PARSER_END(Hoppy)

TOKEN : {
	// Keywords
	  < USING : "using" >
	| < AS :	"as" >
	| < IN : 	"in" >
	| < THIS : 	"this" >
	| < ALL : 	"all" >
	| < COLON :	":" >
	| < TILDE :	"~" >

	// Functions
	| < NEIGHBOURS :	"Neighbours" >

	// Set functions
	| < SET_TRANS_FNS :	"sum" | "mean" | "max" | "min" >
	| < SET_FNS : 		"len" >

	// Variable functions
	| < VAR_FNS :		"abs" >
	
	// High precedence operators have a higher number prefix after
	// them here. However, when parsing the lowest numbered prefix
	// is used first.
	
	// Operators
	| < LOGICAL_MATH_OP_1 : "<" | "<=" | ">" | ">=" >
	| < LOGICAL_MATH_OP_2 : "==" | "!=" >
	
	| < MATH_OP_1 : 		"**" >
	| < MATH_OP_2 : 		"*" | "/" | "%" >
	| < MATH_OP_3 : 		"+" | "-" >
	
	| < LOGICAL_BIN_OP_1 :	"&" >
	| < LOGICAL_BIN_OP_2 :	"^" >
	| < LOGICAL_BIN_OP_3 :	"|" >
	| < LOGICAL_BIN_OP_4 :	"=>" >
	| < LOGICAL_BIN_OP_5 :	"<=>" >
	
	| < LOGICAL_UN_OP :		"!" >
	| < QUANTIFIER :		"@" | "#" >
	
	// Regexes
	| < NUMBER :	("-")? (<DIGIT>)+ >
	| < FLOAT :		("-")? (<DIGIT>)+ ("." (<DIGIT>)*)? >
	| < NAME :		<LETTER> (<ALPHANUM>)* >
	| < ALPHANUM : 	<LETTER> | <DIGIT> >
	| <#LETTER :	["A"-"Z", "a"-"z"] >
	| <#DIGIT :		["0"-"9"] >
}

SKIP : {
	  " "
	| "\t"
	| "\n"
	| "\r"
	
	// Skip comment lines
	| <"//" (~["\n","\r"])* ("\n"|"\r")>
}

Program Input() :
{
	PredicateTarget target;
	ISyntaxTree tree;
}
{
	"[" 
	(
		target = Target()
	)
	"]"
	(
		tree = Using()
	)
	<EOF>
	{
		return new Program(target, tree);
	}
}

PredicateTarget Target() :
{
	int a, b;
	int[] addr = null;
}
{
	(
		(
			// Flood targeting.
			<ALL>
		)
		|
		(
			// Specific node targeting.
			(a = UnsignedCharNumber() "," b = UnsignedCharNumber())
		)
		{
			addr = new int[] { a, b };
		}
	)
	{
		PredicateTarget target = new PredicateTarget();

		if (addr == null) 
		{
			target.setToAll();
		}
		else
		{
			target.setAddr(addr);
		}

		return target;
	}
}

int UnsignedCharNumber() :
{
	Token t;
}
{
	(t = <NUMBER>)
	{
		int i = Integer.parseInt(t.image);

		if (!(i >= 0 && i <= 255))
		{
			throw new ParseException("Integer is not in desired format");
		}

		return i;
	}
}

ISyntaxTree Using() :
{
	int count;
	Token fnAlias;

	UsingDecl root = null, current = null;
	ISyntaxTree node;
}
{
	(
		(
			<USING> 
			(
				count = Neighbours()
			)
			<AS>
			(
				fnAlias = <NAME>
			) 
			<IN>
		)
		{
			UsingDecl usingdecl = new UsingDecl();
			usingdecl.setNeighbourCount(count);
			usingdecl.setVariable(fnAlias.image);
			
			if (root == null)
			{
				current = root = usingdecl;
			}
			else
			{
				current.setScope(usingdecl);
				
				current = usingdecl;
			}
		}
	)* 

	node = Predicate()
	{
		if (current == null)
		{
			return node;
		}
		else
		{
			current.setScope(node);
			
			return root;
		}
	}
} 

int Neighbours() :
{
	Token argToken;
}
{
	<NEIGHBOURS> "(" (argToken = <NUMBER>) ")"
	{
		return Integer.parseInt(argToken.image);
	}
}

ISyntaxTree Predicate() :
{
	ISyntaxTree node;
}
{
	node = LogicalBinaryExprFirst() { return node; }
}

ISyntaxTree QuantifierExpr() :
{
	Token quantifier;
	Token var;
	Token set;
	ISyntaxTree left;
}
{
	quantifier = <QUANTIFIER>
	"("
	var = <NAME>
	<COLON>
	set = <NAME>
	<TILDE>
	left = Predicate()
	")"
	{
		return new QuantifierNode(quantifier.image, var.image, set.image, left);
	}
}


ISyntaxTree LogicalUnaryExpr() :
{
	Token op;
	ISyntaxTree left;
}
{
	//A unary operator applied to a predicate.
	op = <LOGICAL_UN_OP>
	left = Predicate()
	{
		return new UnaryOperatorNode(op.image, left);
	}
}


ISyntaxTree LogicalMathBinaryExprFirst() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A logical comparison between two arithmetic expressions.
	(left = LogicalMathBinaryExprSecond())
	(
		(op = <LOGICAL_MATH_OP_2>) (right = LogicalMathBinaryExprSecond())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}

ISyntaxTree LogicalMathBinaryExprSecond() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A logical comparison between two arithmetic expressions.
	(left = MathBinaryExprFirst())
	(
		(op = <LOGICAL_MATH_OP_1>) (right = MathBinaryExprFirst())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}

ISyntaxTree MathBinaryExprFirst() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A logical comparison between two arithmetic expressions.
	(left = MathBinaryExprSecond())
	(
		(op = <MATH_OP_3>) (right = MathBinaryExprSecond())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}

ISyntaxTree MathBinaryExprSecond() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A logical comparison between two arithmetic expressions.
	(left = MathBinaryExprThird())
	(
		(op = <MATH_OP_2>) (right = MathBinaryExprThird())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}

ISyntaxTree MathBinaryExprThird() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A logical comparison between two arithmetic expressions.
	(left = VariableExpr())
	(
		(op = <MATH_OP_1>) (right = MathBinaryExprThird())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}


ISyntaxTree LogicalBinaryExprFirst() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A conjunction or disjunction on two predicates.
	(left = LogicalBinaryExprSecond())
	(
		(op = <LOGICAL_BIN_OP_5>) (right = LogicalBinaryExprSecond())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}

ISyntaxTree LogicalBinaryExprSecond() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A conjunction or disjunction on two predicates.
	(left = LogicalBinaryExprThird())
	(
		(op = <LOGICAL_BIN_OP_4>) (right = LogicalBinaryExprThird())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}

ISyntaxTree LogicalBinaryExprThird() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A conjunction or disjunction on two predicates.
	(left = LogicalBinaryExprFourth())
	(
		(op = <LOGICAL_BIN_OP_3>) (right = LogicalBinaryExprFourth())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}

ISyntaxTree LogicalBinaryExprFourth() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A conjunction or disjunction on two predicates.
	(left = LogicalBinaryExprFifth())
	(
		(op = <LOGICAL_BIN_OP_2>) (right = LogicalBinaryExprFifth())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}

ISyntaxTree LogicalBinaryExprFifth() :
{
	Token op;
	ISyntaxTree left, right;
}
{
	//A conjunction or disjunction on two predicates.
	(left = LogicalBinaryExprEnd())
	(
		(op = <LOGICAL_BIN_OP_1>) (right = LogicalBinaryExprFifth())
		{
			left = new BinaryOperatorNode(op.image, left, right);
		}
	)*
	{
		return left;
	}
}


ISyntaxTree LogicalBinaryExprEnd() :
{
	ISyntaxTree node;
}
{
	node = QuantifierExpr() { return node; }
	|
	node = LogicalUnaryExpr() { return node; }
	|
	node = LogicalMathBinaryExprFirst() { return node; }
}


ISyntaxTree VariableExpr() :
{
	ISyntaxTree node;
}
{
	node = VariableNameOrFunctionLiteral() { return node; }
	|
	node = ArithmeticLiteral() { return node; }
	|
	node = MathFunction() { return node; }
	|
	node = SetFunction() { return node; }
}

ISyntaxTree VariableNameOrFunctionLiteral() :
{
	Token varname, varargs = null;
}
{
	// A name (either a variable, or if arguments are supplied, a function).
	varname = <NAME>
	(
		"("
		(
			(varargs = <THIS>) | (varargs = <NAME>)
		)
		")"
	)?
	{
		if (varargs != null)
		{
			FuncDecl fn = new FuncDecl();
			fn.setName(varname.image);
			fn.setArgs(new ISyntaxTree[] { new NamedValueNode(varargs.image) });
			return fn;
		}
		else
		{
			return new NamedValueNode(varname.image);
		}
	}
}

ISyntaxTree ArithmeticLiteral() throws NumberFormatException, ParseException :
{
	Token literal;
}
{
	// An arithmetic literal.
	((literal = <NUMBER>) | (literal = <FLOAT>))
	{
		LiteralValueNode lvn = null;
	
		// Parse the literal and wrap it in a node.
		try
		{
			lvn = new LiteralValueNode(new IntegerValue(literal.image));
		}
		catch (NumberFormatException e)
		{
			lvn = new LiteralValueNode(new FloatValue(literal.image));
		}
		
		return lvn;
	}
}

ISyntaxTree MathFunction() :
{
	ISyntaxTree expr;
	Token varname;
}
{
	(
		varname = <VAR_FNS> "(" expr = MathBinaryExprFirst() ")"
		{
			FuncDecl fn = new FuncDecl();
			fn.setName(varname.image);
			fn.setArgs(new ISyntaxTree[] { expr });
			return fn;
		}
	)
}


ISyntaxTree SetFunction() :
{
	Token setfnname, varname, fnname = null;
}
{
	(
		setfnname = <SET_FNS> "(" varname = <NAME> ")"
		{
			FuncDecl fn1 = new FuncDecl();
			fn1.setName(setfnname.image);
			fn1.setArgs(new ISyntaxTree[] { new NamedValueNode(varname.image) });
			return fn1;
		}
	)
	|
	(
		setfnname = <SET_TRANS_FNS> "(" varname = <NAME> "," fnname = <NAME> ")"
		{
			FuncDecl fn2 = new FuncDecl();
			fn2.setName(setfnname.image);
			fn2.setArgs(new ISyntaxTree[] { new NamedValueNode(varname.image), new NamedValueNode(fnname.image) });
			return fn2;
		}
	)
}
