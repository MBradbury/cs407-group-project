options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Hoppy)

import java.io.PrintStream;

public class Hoppy
{
	public static void main(String args[]) throws ParseException
	{
		Hoppy parser = new Hoppy(System.in);
		parser.Input(System.out);
	}
}

PARSER_END(Hoppy)

TOKEN : {
	//Keywords
	< USING : 	"using" >
	| < AS :	"as" >
	| < IN : 	"in" >
	| < THIS : 	"this" >
	| < ALL : 	"all" >
	| < COLON :	":" >
	| < TILDE :	"~" >
	
	//Operators
	| < LOGICAL_MATH_OP : 	"==" | "!=" | "<" | "<=" | ">" | ">=" >
	| < MATH_OP : 			"+" | "-" | "*" | "/" >
	| < LOGICAL_OP :		"&" | "|" >
	| < QUANTIFIER :		"@" | "#" >

	//Regexes
	| < ADDR : 	(<DIGIT>)+ "." (<DIGIT>)+ >
	| < NAME :	<LETTER> (<ALPHANUM>)* >
	| < ALPHANUM : 	<LETTER> | <DIGIT> >
	| < LETTER :	["a"-"z"] >
	| < DIGIT :	["0"-"9"] >
	| < NEWLINE : 	"\n" | "\r" | "\r\n" >
}

SKIP : { " " | "\t" }

void Input(PrintStream out) :
{
	int[] target;
	String using;
}
{
	"[" 
	(
		target = Target()
		{ out.println(target == null ? "*" : target.toString()); }
	)
	"]"
	(
		using = Using()
		{ out.println(using); }
	)
	<EOF>
}

int[] Target() :
{
	Token t;
	int[] addr = null;
}
{
	(
		(
			//Flood targeting.
			<ALL>
		)
		|
		(
			//Specific node targeting.
			t = <ADDR>
		)
		{
			//Build array of address components.
			String[] comps = t.image.split("\\.");
			addr = new int[2];
			addr[0] = Integer.parseInt(comps[0]);
			addr[1] = Integer.parseInt(comps[1]);
		}
	)
	{
		return addr;
	}
}

String Using() :
{
	String func = "null";
	Token nameToken;
	String nt = "null";
	String pred = "null";
}
{
	(
		<USING> 
		(
			func = Function()
		)
		<AS>
		(
			nameToken = <NAME>
			{ nt = nameToken.image; }
		) 
		<IN>
	)* 
	pred = Predicate()
	{
		return func + nt + pred;
	}
} 

String Function() :
{
}
{
	<NAME>
	{ return "function"; }
}

String Predicate() :
{
}
{
	<NAME>
	{ return "predicate"; }
}
