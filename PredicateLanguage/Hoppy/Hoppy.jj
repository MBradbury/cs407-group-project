options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Hoppy)

import java.io.PrintStream;

public class Hoppy
{
	public static void main(String args[]) throws ParseException
	{
		Hoppy parser = new Hoppy(System.in);
		parser.Input(System.out);
	}
}

final class FuncDecl
{
	private String name = null;
	private String[] args = null;

	public String getName() { return name; }
	public void setName(String name) { this.name = name; }

	public String[] getArgs() { return args; }
	public void setArgs(String[] args) { this.args = args; }
}

final class PredicateTarget
{
	private boolean all = false;
	private int[] addr = null;

	public void setToAll() { all = true; addr = null; }
	public boolean isToAll() { return all; }

	public void setAddr(int[] addr) { this.addr = addr; all = false; }
	public int[] getAddr() { return addr; }

	public String toString()
	{
		return all ? "all" : addr[0] + "." + addr[1];
	}
}

PARSER_END(Hoppy)

TOKEN : {
	// Keywords
	< USING : 	"using" >
	| < AS :	"as" >
	| < IN : 	"in" >
	| < THIS : 	"this" >
	| < ALL : 	"all" >
	| < COLON :	":" >
	| < TILDE :	"~" >

	// Functions
	| < NEIGHBOURS :		"Neighbours" >
	
	// Operators
	| < LOGICAL_MATH_OP : 	"==" | "!=" | "<" | "<=" | ">" | ">=" >
	| < MATH_OP : 			"+" | "-" | "*" | "/" >
	| < LOGICAL_OP :		"&" | "|" >
	| < QUANTIFIER :		"@" | "#" >

	// Regexes
	| < NUMBER :	(<DIGIT>)+ >
	| < NAME :		<LETTER> (<ALPHANUM>)* >
	| < ALPHANUM : 	<LETTER> | <DIGIT> >
	| < #LETTER :	["a"-"z"] >
	| < #DIGIT :	["0"-"9"] >
}

SKIP : { " " | "\t" | "\n" | "\r" }

void Input(PrintStream out) :
{
	PredicateTarget target;
	String using;
}
{
	"[" 
	(
		target = Target()
		{ out.println(target.toString()); }
	)
	"]"
	(
		using = Using()
		{ out.println(using); }
	)
	<EOF>
}

PredicateTarget Target() :
{
	int a, b;
	int[] addr = null;
}
{
	(
		(
			// Flood targeting.
			<ALL>
		)
		|
		(
			// Specific node targeting.
			a = UnsignedCharNumber() "." b = UnsignedCharNumber()
		)
		{
			addr = new int[] { a, b };
		}
	)
	{
		PredicateTarget target = new PredicateTarget();

		if (addr == null)
			target.setToAll();
		else
			target.setAddr(addr);

		return target;
	}
}

int UnsignedCharNumber() throws ParseException :
{
	Token t;
}
{
	(t = <NUMBER>)
	{
		int i = Integer.parseInt(t.image);

		if (!(i >= 0 && i <= 255))
		{
			throw new ParseException("Integer is not in desired format");
		}

		return i;
	}
}


String Using() :
{
	FuncDecl func = null;
	Token nameToken;
	String nt = null;
	String pred = null;
}
{
	(
		<USING> 
		(
			func = Function()
		)
		<AS>
		(
			nameToken = <NAME>
			{ nt = nameToken.image; }
		) 
		<IN>
	)* 
	pred = Predicate()
	{
		return func.getName() + nt + pred;
	}
} 

FuncDecl Function() :
{
	Token nameToken, argToken;
}
{
	((nameToken = <NEIGHBOURS>) "(" (argToken = <NUMBER>) ")")
	{
		FuncDecl fn = new FuncDecl();
		fn.setName(nameToken.image);
		fn.setArgs(new String[] { argToken.image });
		return fn;
	}
}

String Predicate() :
{
}
{
	<NAME>
	{ return "predicate"; }
}

